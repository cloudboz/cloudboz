---
# CloudBoz - Drupal Install
- name: "install drupal"
  become_user: "{{ ansible_user }}"
  community.docker.docker_container:
    name: "{{ drupal_docker_name }}"
    image: "{{ drupal_docker_image }}:{{ drupal_docker_tag }}"
    networks:
      - name: cloudboz-network
    volumes:
      - "/cloudboz/{{ drupal_docker_name }}-data/modules:/var/www/html/modules"
      - "/cloudboz/{{ drupal_docker_name }}-data/profiles:/var/www/html/profiles"
      - "/cloudboz/{{ drupal_docker_name }}-data/sites:/var/www/html/sites"
      - "/cloudboz/{{ drupal_docker_name }}-data/themes:/var/www/html/themes"
      
    restart_policy: always
    ports:
      - "{{ drupal_docker_ports }}:80"
    env:
      WORDPRESS_DB_HOST: "{{ mysql_docker_name }}:{{ mysql_docker_ports }}"
      WORDPRESS_DB_USER: "{{ mysql_docker_env_user }}"
      WORDPRESS_DB_PASSWORD: "{{ mysql_docker_env_password }}"
      WORDPRESS_DB_NAME: "{{ mysql_docker_env_database }}"
      WORDPRESS_TABLE_PREFIX: "{{ drupal_docker_name }}_"
  tags:
    - install-drupal

# CloudBoz - Reverse proxy
- name: "reverse-proxy for apps"
  template:
    src: "{{ item }}"
    dest: /etc/nginx/sites-available/{{ cloudboz_sub_domain }}
  with_items:
    - ../../../files/templates/nginx.conf.j2
  tags:
    - install-drupal

- name: "create a symbolic link"
  ansible.builtin.file:
    src: /etc/nginx/sites-available/{{ cloudboz_sub_domain }}
    dest: /etc/nginx/sites-enabled/{{ cloudboz_sub_domain }}
    state: link
  tags:
  - install-drupal

# CloudBoz - Create Sub Domain
- name: "create sub domain"
  become_user: "{{ ansible_user }}"
  uri:
    url: "https://dns.cloudboz.com/api/v1/servers/localhost/zones/{{ cloudboz_domain }}"
    method: PATCH
    body: "{{ lookup('template','../../../files/templates/domain-create.json.j2') }}"
    body_format: json
    status_code: 204
    headers:
      Content-Type: 'application/json'
      X-API-Key: '{{ apikey }}'
  tags:
    - install-drupal

# CloudBoz - Create SSL
- name: "Generate new certificate"
  shell: "certbot --nginx --noninteractive --agree-tos --email {{ acme_email }} -d {{ cloudboz_sub_domain }}"
  tags:
    - install-drupal

# CloudBoz - Drupal Uninstall
- name: "uninstall drupal"
  become_user: "{{ ansible_user }}"
  community.docker.docker_container:
    name: "{{ drupal_docker_name }}"
    state: absent
  tags:
    - uninstall-drupal

# CloudBoz - Delete Sub Domain
- name: "delete sub domain"
  become_user: "{{ ansible_user }}"
  uri:
    url: "https://dns.cloudboz.com/api/v1/servers/localhost/zones/{{ cloudboz_domain }}"
    method: PATCH
    body: "{{ lookup('template','../../../files/templates/domain-delete.json.j2') }}"
    body_format: json
    status_code: 204
    headers:
      Content-Type: 'application/json'
      X-API-Key: '{{ apikey }}'
  tags:
    - uninstall-drupal

# CloudBoz - Create SSL
- name: "Delete certificate"
  shell: "certbot delete --cert-name {{ cloudboz_sub_domain }}"
  tags:
    - uninstall-drupal

# CloudBoz - Drupal Uninstall with Data
- name: "uninstall drupal data"
  shell: "rm -fr /cloudboz/{{ drupal_docker_name }}-data"
  tags:
    - uninstall-drupal-data